1.

if (!("a" in window)) {
var a = 1;
}
alert(a);

//Переменная "a" инициализируется в глобальной области видимости как "undefined", поэтому при выполнении кода, при проверке условия (!("a" in window)) будет возвращено "false" и инструкция a = 1 не будет выполнена. Поэтому код всегда будет возвращать значение "Undefined".

2.

var b = function a(x) {
x && a(--x);
};
alert(a);

//Функция "a" определена в области видимости переменной "b". В глобальной области видимости "a" не определено. При вызове интерпретатор вернет ошибку.

3.

function a(x) {
return x * 2;
}
var a;
alert(a);

//Интерпретатор вернет функцию, а точнее текст функции function a(x){return x * 2;} , т.к. "a" объявляется как переменная и инициализируется как функция.

4.

function b(x, y, a) {
arguments[2] = 10;
alert(a);
}
b(1, 2, 3);

//arguments — это подобный массиву объект, который содержит аргументы, переданные в функцию. При вызове функции, независимо от переданных аргументов, третьемуаргументу присваивается значение "10". Это знчение и вернет интерпретатор.

5.

function a() {
alert(this);
}
a.call(null);

//Значение NULL в JS указывает на осутствие объекта, поэтому значение this при вызове функции будет не определено (интерпретатор вернет ошибку в строгом режиме или объект window в нестрогом)